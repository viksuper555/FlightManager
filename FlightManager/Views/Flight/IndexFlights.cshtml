@model FlightManager.ViewModels.Flight.IndexFlightsViewModel
@using FlightManager.ViewModels;
@*@{
        ViewData["Title"] = "IndexFlights";
        Layout = "~/Views/Shared/_Layout.cshtml";
    }*@

<section class="py-5">
    <div class="container">
        <h1 style="margin: 2%; text-align: center;">All Flights</h1>
        <div style="padding: 5%;">
            <table class="table">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">Origin</th>
                        <th scope="col">Destination</th>
                        <th scope="col">Departure at</th>
                        <th scope="col">Flight duration</th>
                        <th scope="col">Passenger Seats</th>
                        <th scope="col">Business Class Seats</th>
                        <th scope="col">Coordinates</th>
                        <th scope="col">Details</th>
                    </tr>
                </thead>
                <tbody>
                    @for (var i = 0; i < Model.Flights.Count; i++)
                    {
                        <tr>
                            <th scope="row">@Model.Flights[i].Origin.Name</th>
                            <td>@Model.Flights[i].Destination.Name</td>
                            <td>@Model.Flights[i].Departure.ToString(" dd.MM.yyyy г. в hh:mm ч.")</td>
                            <td>@Model.Flights[i].FlightDuration.ToString("hh\\:mm")  ч.</td>
                            <td>@Model.Flights[i].PassengerSeatsLeft</td>
                            <td>@Model.Flights[i].BusinessClassSeatsLeft</td>
                            <!--TODO: Add longtitude and latitude-->
                            <td>Origin coordinates: @Model.Flights[i].Origin.Latitude : @Model.Flights[i].Origin.Longitude </td>
                            <td>Destination coordinates: @Model.Flights[i].Destination.Latitude : @Model.Flights[i].Destination.Longitude </td>

                            <td>
                                <div class="button-holder">
                                    <a href="/Flight/IndexDetails?id=@Model.Flights[i].Id" class="btn btn-primary">More info</a>
                                </div>
                            </td>
                        </tr>
                    }

                </tbody>

            </table>

            <div class="d-flex flex-wrap align-items-center">
                <div class="pagination mx-auto">
                    @{
                        var prevPage = Model.CurrentPage - 1;
                        var nextPage = Model.CurrentPage + 1;
                    }
                    @if (Model.CurrentPage > 1)
                    {
                        <a href="/Flight/IndexFlights?page=@prevPage" class="btn btn-primary prev-arrow mx-1"><i class="material-icons">keyboard_arrow_left</i></a>
                    }

                    @for (var p = 1; p <= (Model.FlightsCount / 8) + 1; p++)
                    {
                        @if (p == Model.CurrentPage)
                        {
                            <a class="btn btn-primary" href="/Flight/IndexFlights?page=@p">@p</a>
                        }
                        else if (p >= Model.CurrentPage - 4 && (p <= Model.CurrentPage + 4 && p <= Model.EndPage))
                        {
                            <a href="/Flight/IndexFlights?page=@p" class="btn mx-1">@p</a>
                        }
                    }

                    @if (Model.CurrentPage != Model.EndPage)
                    {
                        <a href="/Flight/IndexFlights?page=@nextPage" class="btn btn-primary next-arrow mx-1"><i class="material-icons">keyboard_arrow_right</i></a>
                    }

                </div>

            </div>

        </div>
    </div>

    <!-- HTML -->
    <div id="chartdiv"></div>

    <!-- Styles -->
    <style>
        #chartdiv {
            width: 100%;
            height: 600px;
        }
    </style>

    <!-- Resources -->
    <script src="https://cdn.amcharts.com/lib/4/core.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/maps.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/geodata/worldLow.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/themes/dataviz.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/themes/animated.js"></script>

    <!-- Chart code -->
    <script>
        am4core.ready(function () {

            // Themes begin
            am4core.useTheme(am4themes_animated);
            am4core.useTheme(am4themes_animated);
            // Themes end

            // Create map instance
            var chart = am4core.create("chartdiv", am4maps.MapChart);

            var interfaceColors = new am4core.InterfaceColorSet();

            // Set map definition
            chart.geodata = am4geodata_worldLow;

            // Set projection
            chart.projection = new am4maps.projections.Mercator();

            // Export
            chart.exporting.menu = new am4core.ExportMenu();

            // Zoom control
            chart.zoomControl = new am4maps.ZoomControl();

            var originCities = @JavaScriptConvert.SerializeObject(Model.Connections.Keys);
            var destinationCities = @JavaScriptConvert.SerializeObject(Model.Connections.Values);
            // Data for general and map use

            // Reassignment is bad, but will shorten the example
            for (i = 0; i < originCities.length; i++) {
                originCities[i].id += "origin"
                originCities[i].scale = 1.5
                originCities[i].title = originCities[i].name
                originCities[i].destinations = destinationCities[i].map(ele => ele.id);
                originCities[i].zoomLevel = 3
                originCities[i].zoomLongitude = originCities[i].longitude
                originCities[i].zoomLatitude = originCities[i].latitude
            }
            console.log(originCities)

            destinationCities = destinationCities.flat()
            for (i = 0; i < originCities.length; i++) {
                destinationCities.id
                destinationCities[i].title = destinationCities[i].name
            }
            console.log(destinationCities)
            
            // Default to London view
            //chart.homeGeoPoint = { "longitude": originCities[0].zoomLongitude, "latitude": originCities[0].zoomLatitude };
            //chart.homeZoomLevel = originCities[0].zoomLevel;

            var targetSVG = "M9,0C4.029,0,0,4.029,0,9s4.029,9,9,9s9-4.029,9-9S13.971,0,9,0z M9,15.93 c-3.83,0-6.93-3.1-6.93-6.93S5.17,2.07,9,2.07s6.93,3.1,6.93,6.93S12.83,15.93,9,15.93 M12.5,9c0,1.933-1.567,3.5-3.5,3.5S5.5,10.933,5.5,9S7.067,5.5,9,5.5 S12.5,7.067,12.5,9z";
            var planeSVG = "m2,106h28l24,30h72l-44,-133h35l80,132h98c21,0 21,34 0,34l-98,0 -80,134h-35l43,-133h-71l-24,30h-28l15,-47";

            // Texts
            var labelsContainer = chart.createChild(am4core.Container);
            labelsContainer.isMeasured = false;
            labelsContainer.x = 80;
            labelsContainer.y = 27;
            labelsContainer.layout = "horizontal";
            labelsContainer.zIndex = 10;

            var plane = labelsContainer.createChild(am4core.Sprite);
            plane.scale = 0.15;
            plane.path = planeSVG;
            plane.fill = am4core.color("#cc0000");

            var title = labelsContainer.createChild(am4core.Label);
            title.text = "Flights from London";
            title.fill = am4core.color("#cc0000");
            title.fontSize = 20;
            title.valign = "middle";
            title.dy = 2;
            title.marginLeft = 15;

            var changeLink = chart.createChild(am4core.TextLink);
            changeLink.text = "Click to change origin city";
            changeLink.isMeasured = false;

            changeLink.events.on("hit", function () {
                if (currentOrigin == originImageSeries.dataItems.getIndex(0)) {
                    showLines(originImageSeries.dataItems.getIndex(1));
                }
                else {
                    showLines(originImageSeries.dataItems.getIndex(0));
                }
            })

            changeLink.x = 142;
            changeLink.y = 72;
            changeLink.fontSize = 13;


            // The world
            var worldPolygonSeries = chart.series.push(new am4maps.MapPolygonSeries());
            worldPolygonSeries.useGeodata = true;
            worldPolygonSeries.fillOpacity = 0.6;
            worldPolygonSeries.exclude = ["AQ"];

            // Origin series (big targets, London and Vilnius)
            var originImageSeries = chart.series.push(new am4maps.MapImageSeries());

            var originImageTemplate = originImageSeries.mapImages.template;

            originImageTemplate.propertyFields.latitude = "latitude";
            originImageTemplate.propertyFields.longitude = "longitude";
            originImageTemplate.propertyFields.id = "id";

            originImageTemplate.cursorOverStyle = am4core.MouseCursorStyle.pointer;
            originImageTemplate.nonScaling = true;
            originImageTemplate.tooltipText = "{title}";

            originImageTemplate.setStateOnChildren = true;
            originImageTemplate.states.create("hover");

            originImageTemplate.horizontalCenter = "middle";
            originImageTemplate.verticalCenter = "middle";

            var originHitCircle = originImageTemplate.createChild(am4core.Circle);
            originHitCircle.radius = 11;
            originHitCircle.fill = interfaceColors.getFor("background");

            var originTargetIcon = originImageTemplate.createChild(am4core.Sprite);
            originTargetIcon.fill = interfaceColors.getFor("alternativeBackground");
            originTargetIcon.strokeWidth = 0;
            originTargetIcon.scale = 1.3;
            originTargetIcon.horizontalCenter = "middle";
            originTargetIcon.verticalCenter = "middle";
            originTargetIcon.path = targetSVG;

            var originHoverState = originTargetIcon.states.create("hover");
            originHoverState.properties.fill = chart.colors.getIndex(1);

            // when hit on city, change lines
            originImageTemplate.events.on("hit", function (event) {
                showLines(event.target.dataItem);
            })

            // destination series (small targets)
            var destinationImageSeries = chart.series.push(new am4maps.MapImageSeries());
            var destinationImageTemplate = destinationImageSeries.mapImages.template;

            destinationImageTemplate.nonScaling = true;
            destinationImageTemplate.tooltipText = "{title}";
            destinationImageTemplate.fill = interfaceColors.getFor("alternativeBackground");
            destinationImageTemplate.setStateOnChildren = true;
            destinationImageTemplate.states.create("hover");

            destinationImageTemplate.propertyFields.latitude = "latitude";
            destinationImageTemplate.propertyFields.longitude = "longitude";
            destinationImageTemplate.propertyFields.id = "id";

            var destinationHitCircle = destinationImageTemplate.createChild(am4core.Circle);
            destinationHitCircle.radius = 7;
            destinationHitCircle.fillOpacity = 1;
            destinationHitCircle.fill = interfaceColors.getFor("background");

            var destinationTargetIcon = destinationImageTemplate.createChild(am4core.Sprite);
            destinationTargetIcon.scale = 0.7;
            destinationTargetIcon.path = targetSVG;
            destinationTargetIcon.horizontalCenter = "middle";
            destinationTargetIcon.verticalCenter = "middle";

            originImageSeries.data = originCities;
            destinationImageSeries.data = destinationCities;

            // Line series
            var lineSeries = chart.series.push(new am4maps.MapLineSeries());
            lineSeries.mapLines.template.line.strokeOpacity = 0.5;

            chart.events.on("ready", function () {
                showLines(originImageSeries.dataItems.getIndex(0));
            })


            var currentOrigin;

            function showLines(origin) {

                var dataContext = origin.dataContext;
                var destinations = dataContext.destinations;
                // clear old
                lineSeries.mapLines.clear();
                lineSeries.toBack();
                worldPolygonSeries.toBack();

                currentOrigin = origin;

                if (destinations) {
                    for (var i = 0; i < destinations.length; i++) {
                        var line = lineSeries.mapLines.create();
                        line.imagesToConnect = [origin.mapImage.id, destinations[i]];
                    }
                }

                title.text = "Flights from " + dataContext.title;

                chart.zoomToGeoPoint({ latitude: dataContext.zoomLatitude, longitude: dataContext.zoomLongitude }, dataContext.zoomLevel, true);
            }

            var graticuleSeries = chart.series.push(new am4maps.GraticuleSeries());
            graticuleSeries.mapLines.template.line.strokeOpacity = 0.05;


        }); // end am4core.ready()
    </script>
</section>